# Generated by Django 4.2.4 on 2023-08-11 12:00

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Loan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(100, message='The minimum loan amount is 100')], verbose_name='loan principle amount')),
                ('status', models.CharField(choices=[('PAID', 'Paid'), ('UNPAID', 'Unpaid')], default='UNPAID', max_length=15)),
                ('annual_interest_rate', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(limit_value=1, message='interest rate can not be less than 1 (%)')], verbose_name='annual interset rate')),
                ('term', models.PositiveIntegerField(help_text='number of months to pay the loan', verbose_name='loan term')),
                ('payment_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(limit_value=1, message='interest rate can not be less than 1 (%)')], verbose_name='loan payment amount')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='loan start date')),
                ('payment_date', models.DateField(blank=True, null=True, verbose_name='next loan payment date')),
                ('approved_at', models.DateTimeField(auto_now_add=True, verbose_name='approved at')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issued_loans', to=settings.AUTH_USER_MODEL, verbose_name='bank employee')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='provided_loans', to=settings.AUTH_USER_MODEL, verbose_name='loan provider')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_loans', to=settings.AUTH_USER_MODEL, verbose_name='loan recipient')),
            ],
            options={
                'verbose_name': 'loan',
                'verbose_name_plural': 'loans',
                'db_table': 'loans',
            },
        ),
        migrations.CreateModel(
            name='PaymentTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(100, message='The minimum loan amount is 100')])),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='created at')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_transactions', to=settings.AUTH_USER_MODEL, verbose_name='customer')),
                ('loan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='loans.loan', verbose_name='loan')),
            ],
            options={
                'verbose_name': 'payment transaction',
                'verbose_name_plural': 'payment transactions',
                'db_table': 'payment_transactions',
            },
        ),
        migrations.CreateModel(
            name='LoanRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='PENDING', max_length=15)),
                ('requested_at', models.DateTimeField(auto_now_add=True, verbose_name='requested at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('amount', models.DecimalField(decimal_places=2, help_text='the loan amount', max_digits=10, validators=[django.core.validators.MinValueValidator(100, message='The minimum loan amount is 100')], verbose_name='amount')),
                ('term', models.PositiveIntegerField(help_text='number of months to pay the loan', verbose_name='loan term')),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loan_requests', to=settings.AUTH_USER_MODEL, verbose_name='loan requester')),
            ],
            options={
                'verbose_name': 'loan request',
                'verbose_name_plural': 'loan requests',
                'db_table': 'loan_requests',
            },
        ),
        migrations.AddField(
            model_name='loan',
            name='request',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='loans.loanrequest', verbose_name='loan request'),
        ),
        migrations.CreateModel(
            name='Amortization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('initial_balance', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(limit_value=0, message='intial balance must greater or equal to 0')], verbose_name='intial balance amount')),
                ('payment_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(limit_value=0, message='payment must greater or equal to 0')], verbose_name='payment amount')),
                ('interset_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(limit_value=0, message='interset must greater or equal to 0')], verbose_name='interset amount')),
                ('principal_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(limit_value=0, message='principal must greater or equal to 0')], verbose_name='principal amount')),
                ('ending_balance', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(limit_value=0, message='ending balance must greater or equal to 0')], verbose_name='ending balance amount')),
                ('loan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='amortizations', to='loans.loan', verbose_name='loan')),
            ],
            options={
                'verbose_name': 'amortization',
                'verbose_name_plural': 'amortizations',
                'db_table': 'amortizations',
            },
        ),
    ]
